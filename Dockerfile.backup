# Production-Ready Trading System Docker Image
# This file is kept as backup - DigitalOcean uses buildpacks
FROM node:18-slim as frontend-builder

# Set working directory
WORKDIR /app

# Copy frontend package files
COPY src/frontend/package.json ./
COPY src/frontend/vite.config.js ./

# Copy frontend source code
COPY src/frontend/ ./

# Install dependencies with clean approach to handle optional dependency issues
# This approach always works for the rollup linux dependencies
RUN rm -rf node_modules package-lock.json && npm install
RUN npm run build

# Verify build output
RUN ls -la dist/ || echo "No dist directory found"
RUN ls -la dist/frontend/ || echo "No frontend build output found"

# Python application stage
FROM python:3.11-slim

# Build arguments for cache busting
ARG BUILD_DATE=2025-06-07
ARG VERSION=2.0.0

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user and directory
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

WORKDIR /app

# Copy requirements and install Python dependencies
COPY docker-requirements.txt requirements.txt
RUN pip install --upgrade pip==24.0
RUN pip install -r requirements.txt

# Copy application code
COPY . /app/

# Copy frontend build from previous stage to the correct location
COPY --from=frontend-builder /app/dist/frontend /app/dist/frontend

# Create necessary directories
RUN mkdir -p /app/backups /app/logs /app/data /app/dist

# Set file permissions
RUN chown -R appuser:appuser /app && \
    chmod +x /app/main.py

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health/alive || exit 1

# Expose port
EXPOSE 8000

# Set default environment
ENV ENVIRONMENT=production
ENV PORT=8000

# Start command
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--access-log", "--log-level", "info"] 