# Production Multi-Stage Dockerfile for Trading System
# Optimized for security, performance, and minimal attack surface

# Build stage for AI/ML models
FROM python:3.11-slim as ml-builder

# Set build arguments
ARG BUILDKIT_INLINE_CACHE=1
ARG PYTHON_VERSION=3.11

# Install system dependencies for ML libraries
RUN apt-get update && apt-get install -y \
    build-essential \
    libopenblas-dev \
    liblapack-dev \
    gfortran \
    pkg-config \
    libjpeg-dev \
    zlib1g-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libwebp-dev \
    tcl8.6-dev \
    tk8.6-dev \
    python3-tk \
    libharfbuzz-dev \
    libfribidi-dev \
    libxcb1-dev \
    && rm -rf /var/lib/apt/lists/*

# Install ML dependencies
COPY requirements-ml.txt /tmp/
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements-ml.txt

# Application build stage
FROM python:3.11-slim as app-builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user with restricted permissions
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt requirements-prod.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy application code
COPY --chown=appuser:appuser . .

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/models /app/config && \
    chown -R appuser:appuser /app

# Production runtime stage
FROM python:3.11-slim as production

# Set production environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    ENVIRONMENT=production \
    TZ=Asia/Kolkata

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user with minimal privileges
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/false appuser

# Set working directory
WORKDIR /app

# Copy Python environment from builder
COPY --from=app-builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=app-builder /usr/local/bin/ /usr/local/bin/

# Copy ML libraries from ML builder
COPY --from=ml-builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/

# Copy application code
COPY --from=app-builder --chown=appuser:appuser /app .

# Create production configuration
RUN mkdir -p /app/logs /app/data /app/models /app/cache && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app && \
    chmod 644 /app/config/*.yaml

# Security hardening
RUN chmod 000 /app/config/secrets.yaml 2>/dev/null || true && \
    rm -rf /tmp/* /var/tmp/* 2>/dev/null || true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--"]

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8000 8001 8002

# Labels for metadata
LABEL maintainer="trading-system@yourdomain.com" \
      version="2.0.0" \
      description="Production AI-Powered Trading System" \
      org.opencontainers.image.title="Trading System" \
      org.opencontainers.image.description="Professional AI-powered trading system for real money trading" \
      org.opencontainers.image.url="https://github.com/yourusername/trading-system" \
      org.opencontainers.image.documentation="https://docs.yourdomain.com/trading-system" \
      org.opencontainers.image.source="https://github.com/yourusername/trading-system" \
      org.opencontainers.image.vendor="Your Company" \
      org.opencontainers.image.licenses="Proprietary"

# Start the application with production WSGI server
CMD ["python", "-m", "gunicorn", "main:app", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "50", \
     "--preload", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info", \
     "--capture-output", \
     "--enable-stdio-inheritance"] 