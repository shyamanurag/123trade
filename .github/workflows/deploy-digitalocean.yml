name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - hotfix

env:
  DROPLET_IP: "165.22.212.171"
  SSH_USER: "root"
  PROJECT_NAME: "trading-system-new"
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node dependencies
      run: npm install
      
    - name: Run complete system test
      run: python complete_system_test.py
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: complete_test_results.json

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts
        
    - name: Test SSH Connection
      run: |
        ssh -o ConnectTimeout=10 ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "echo 'SSH connection successful'"
        
    - name: Deploy Application
      run: |
        # Create deployment directory
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "mkdir -p /opt/deployments/$(date +%Y%m%d_%H%M%S)"
        
        # Stop services for deployment
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "systemctl stop trading-backend trading-websocket || true"
        
        # Backup current deployment
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cp -r /opt/${{ env.PROJECT_NAME }} /opt/deployments/backup-$(date +%Y%m%d_%H%M%S) || true"
        
        # Update code
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/${{ env.PROJECT_NAME }} && git fetch origin && git reset --hard origin/main"
        
        # Update Python dependencies
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/${{ env.PROJECT_NAME }} && source venv/bin/activate && pip install -r requirements.txt"
        
        # Update frontend
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/${{ env.PROJECT_NAME }} && npm install && npm run build"
        
        # Update environment configuration
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/${{ env.PROJECT_NAME }} && cp config.example.env .env"
        
    - name: Update Production Environment
      run: |
        # Create production environment file
        cat > production.env << EOF
        # Production Environment Configuration
        ENVIRONMENT=production
        DEBUG=False
        HOST=0.0.0.0
        PORT=8000
        
        # Security
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
        
        # Database
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        
        # Redis
        REDIS_URL=${{ secrets.REDIS_URL }}
        
        # API Configuration
        API_PREFIX=/api/v1
        CORS_ORIGINS=["http://${{ env.DROPLET_IP }}", "https://${{ env.DROPLET_IP }}"]
        
        # Trading Configuration
        ENABLE_REAL_TRADING=${{ secrets.ENABLE_REAL_TRADING }}
        PAPER_TRADING=true
        MAX_POSITION_SIZE=${{ secrets.MAX_POSITION_SIZE }}
        RISK_LIMIT=${{ secrets.RISK_LIMIT }}
        
        # External APIs
        TRADING_API_KEY=${{ secrets.TRADING_API_KEY }}
        TRADING_API_SECRET=${{ secrets.TRADING_API_SECRET }}
        
        # Monitoring
        LOG_LEVEL=INFO
        ENABLE_METRICS=true
        BACKUP_ENABLED=true
        
        # WebSocket
        WEBSOCKET_PORT=8002
        ENABLE_WEBSOCKET=true
        EOF
        
        # Copy environment file to server
        scp production.env ${{ env.SSH_USER }}@${{ env.DROPLET_IP }}:/opt/${{ env.PROJECT_NAME }}/.env
        rm production.env
        
    - name: Run Database Migrations
      run: |
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/${{ env.PROJECT_NAME }} && source venv/bin/activate && python -c 'from main import app; print(\"Database ready\")'"
        
    - name: Start Services
      run: |
        # Start services
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "systemctl daemon-reload"
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "systemctl start trading-backend"
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "systemctl start trading-websocket"
        
        # Wait for services to start
        sleep 15
        
    - name: Health Check
      run: |
        # Check backend health
        for i in {1..10}; do
          if ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "curl -f http://localhost:8000/health"; then
            echo "Backend is healthy"
            break
          fi
          echo "Waiting for backend to start... ($i/10)"
          sleep 10
        done
        
        # Check frontend
        if ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "curl -f http://localhost/"; then
          echo "Frontend is accessible"
        else
          echo "Frontend check failed"
          exit 1
        fi
        
    - name: Run Post-Deployment Tests
      run: |
        # Test API endpoints
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "curl -f http://localhost:8000/"
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "curl -f http://localhost:8000/docs"
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "curl -f http://localhost:8000/health"
        
    - name: Cleanup Old Deployments
      run: |
        # Keep only last 5 deployments
        ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "cd /opt/deployments && ls -t | tail -n +6 | xargs rm -rf"
        
    - name: Send Deployment Notification
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful to http://${{ env.DROPLET_IP }}"
        else
          echo "❌ Deployment failed"
          # Rollback on failure
          ssh ${{ env.SSH_USER }}@${{ env.DROPLET_IP }} "systemctl stop trading-backend trading-websocket || true"
          exit 1
        fi

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🚀 AI Trading System deployed successfully!"
          echo "📍 URL: http://${{ env.DROPLET_IP }}"
          echo "📚 API Docs: http://${{ env.DROPLET_IP }}/docs"
          echo "🔍 Health: http://${{ env.DROPLET_IP }}/health"
        else
          echo "❌ Deployment failed. Check logs for details."
        fi 