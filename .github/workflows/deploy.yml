name: Deploy Trading System to DigitalOcean

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: trading-system
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Set up test environment
      run: |
        cp config/config.test.yaml config/config.yaml
        python common/simple_config_validator.py validate
        
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_test
        
    - name: Run linting
      run: |
        black --check .
        flake8 .
        mypy src/ --ignore-missing-imports
        
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o security-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        TESTING: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_test
        REDIS_URL: redis://localhost:6379/1
        
    - name: Run integration tests
      run: |
        python run_tests.py --tests integration_tests
      env:
        TESTING: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_test
        REDIS_URL: redis://localhost:6379/1
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Set up kubectl
      run: |
        doctl kubernetes cluster kubeconfig save ${{ secrets.DO_K8S_CLUSTER_NAME }}
        
    - name: Deploy to staging
      run: |
        envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/trading-system-staging -n trading-staging --timeout=300s
        kubectl get services -n trading-staging
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
        JWT_SECRET_KEY: ${{ secrets.STAGING_JWT_SECRET }}
        
    - name: Run health check
      run: |
        sleep 30
        kubectl port-forward service/trading-system-staging 8080:8000 -n trading-staging &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  deploy-production:
    needs: [test, build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Set up kubectl
      run: |
        doctl kubernetes cluster kubeconfig save ${{ secrets.DO_K8S_CLUSTER_NAME }}
        
    - name: Backup database
      run: |
        # Create database backup before deployment
        kubectl create job backup-$(date +%Y%m%d-%H%M%S) --from=cronjob/database-backup -n trading-production || true
        
    - name: Deploy to production
      run: |
        envsubst < k8s/production/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/trading-system-production -n trading-production --timeout=600s
        kubectl get services -n trading-production
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
        JWT_SECRET_KEY: ${{ secrets.PRODUCTION_JWT_SECRET }}
        
    - name: Run comprehensive health check
      run: |
        sleep 60
        kubectl port-forward service/trading-system-production 8080:8000 -n trading-production &
        sleep 15
        
        # Health check
        curl -f http://localhost:8080/health || exit 1
        
        # API check
        curl -f http://localhost:8080/api/v1/health || exit 1
        
        # Database connectivity
        curl -f http://localhost:8080/api/v1/system/database-status || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 Trading System successfully deployed to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Trading System deployment to production failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Container security scan
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
      run: |
        docker pull ${{ needs.build.outputs.image-tag }} || echo "Image not available for security scan"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scans
        path: |
          trivy-results.sarif

  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: |
        k6 run tests/performance/api-load-test.js
      env:
        K6_STAGING_URL: ${{ secrets.STAGING_URL }}
        K6_API_TOKEN: ${{ secrets.STAGING_API_TOKEN }}
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-report.json

  ai-model-deployment:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install ML dependencies
      run: |
        pip install -r requirements-ml.txt
        
    - name: Download latest model artifacts
      run: |
        python scripts/deploy_models.py --environment ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      env:
        MODEL_REGISTRY_URL: ${{ secrets.MODEL_REGISTRY_URL }}
        MODEL_REGISTRY_TOKEN: ${{ secrets.MODEL_REGISTRY_TOKEN }}
        MODEL_SERVING_ENDPOINT: ${{ secrets.MODEL_SERVING_ENDPOINT }}
        MODEL_SERVING_TOKEN: ${{ secrets.MODEL_SERVING_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 165.22.212.171 >> ~/.ssh/known_hosts || true
        
    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection..."
        timeout 30 ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@165.22.212.171 "echo 'SSH connection successful'" || {
          echo "❌ SSH connection failed - droplet might be down"
          echo "Please check Digital Ocean console and ensure droplet is running"
          echo "Droplet IP: 165.22.212.171"
          exit 1
        }
        
    - name: Check Droplet Status
      run: |
        echo "Checking droplet connectivity..."
        ping -c 4 165.22.212.171 || {
          echo "❌ Droplet not responding to ping"
          echo "This usually means:"
          echo "1. Droplet is powered off"
          echo "2. IP address has changed"
          echo "3. Network connectivity issues"
          exit 1
        }
        
    - name: Deploy Application
      run: |
        echo "🚀 Starting deployment to Digital Ocean..."
        
        # Pull latest code
        ssh root@165.22.212.171 "
          cd /opt/trading-system-new || {
            echo 'Project directory not found, cloning...'
            cd /opt
            git clone https://github.com/shyamanurag/trading-system-new.git
            cd trading-system-new
          }
          
          echo 'Fetching latest changes...'
          git fetch origin
          git reset --hard origin/main
          
          echo 'Installing dependencies...'
          npm install --production=false
          
          echo 'Building frontend...'
          npm run build || {
            echo 'Frontend build failed, using fallback...'
            mkdir -p dist/frontend
            cp static-frontend.html dist/frontend/index.html 2>/dev/null || true
          }
          
          echo 'Verifying build...'
          ls -la dist/frontend/
          
          echo 'Restarting services...'
          systemctl restart trading-system-backend || echo 'Backend service not found'
          systemctl restart trading-system-frontend || echo 'Frontend service not found'
          systemctl reload nginx || echo 'Nginx reload failed'
          
          echo 'Checking service status...'
          systemctl is-active trading-system-backend || echo 'Backend not active'
          systemctl is-active nginx || echo 'Nginx not active'
          
          echo '✅ Deployment completed successfully!'
        "
        
    - name: Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Test health endpoint
        curl -f http://165.22.212.171/health || {
          echo "❌ Health check failed"
          echo "Application might not be running properly"
        }
        
        # Test main endpoint
        curl -f http://165.22.212.171/ || {
          echo "❌ Main endpoint failed"
          echo "Frontend might not be serving properly"
        }
        
        echo "✅ Deployment verification completed"
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "📋 Deployment Summary:"
        echo "- Repository: ${{ github.repository }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Target: 165.22.212.171"
        echo "- Time: $(date)"
        echo ""
        echo "🌐 Access your application:"
        echo "- Main Site: http://165.22.212.171"
        echo "- API Docs: http://165.22.212.171/docs"
        echo "- Health Check: http://165.22.212.171/health" 