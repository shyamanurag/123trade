version: '3.8'

# =============================================================================
# ENHANCED DOCKER COMPOSE FOR CRYPTO TRADING SYSTEM
# Production-ready configuration with security and monitoring
# =============================================================================

x-common-variables: &common-variables
  TZ: UTC
  PYTHONUNBUFFERED: 1
  ENVIRONMENT: ${ENVIRONMENT:-production}

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # =============================================================================
  # MAIN TRADING APPLICATION
  # =============================================================================
  trading-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-4.0.1}
    container_name: crypto-trading-system
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_system
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      TIMESCALE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@timescale:5432/timescale_trading
      TRADING_MODE: ${TRADING_MODE:-free-tier}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_DEBUG: ${API_DEBUG:-false}
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # External APIs
      BINANCE_API_KEY: ${BINANCE_API_KEY:-}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-}
      # Monitoring
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
      METRICS_PORT: ${METRICS_PORT:-9001}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./backups:/app/backups
      - trading_tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/liveness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - trading-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: trading-timescale
    restart: unless-stopped
    environment:
      POSTGRES_DB: timescale_trading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./database/timescale:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    ports:
      - "${TIMESCALE_PORT:-5433}:5432"
    networks:
      - trading-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d timescale_trading"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # =============================================================================
  # CACHE AND MESSAGE QUEUE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - trading-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - trading-app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SECURE: ${GRAFANA_SECURE_COOKIES:-false}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # =============================================================================
  # REVERSE PROXY AND LOAD BALANCER
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - trading-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - trading-app
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  # =============================================================================
  # LOG MANAGEMENT
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: trading-elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      bootstrap.memory_lock: true
      "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: trading-logstash
    restart: unless-stopped
    volumes:
      - ./elk/logstash/config:/usr/share/logstash/config:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/app/logs:ro
    ports:
      - "${LOGSTASH_PORT:-5044}:5044"
    networks:
      - monitoring-network
    logging: *default-logging
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: trading-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: trading-kibana
      SERVER_HOST: "0.0.0.0"
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: trading-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - trading-network
    logging: *default-logging
    depends_on:
      - postgres
      - timescale
    profiles:
      - backup
    command: ["/backup.sh"]

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  trading-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: trading_bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          
  monitoring-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: monitoring_bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
      
  timescale_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/timescale
      
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
      
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus
      
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grafana
      
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/elasticsearch
      
  nginx_cache:
    driver: local
    
  trading_tmp:
    driver: tmpfs
    driver_opts:
      tmpfs-size: 100M