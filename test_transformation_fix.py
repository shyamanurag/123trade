#!/usr/bin/env python3
"""
Test Transformation Fix
Verify that original strategies now get proper price_change and volume_change data
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.orchestrator import TradingOrchestrator
from strategies.volume_profile_scalper import EnhancedVolumeProfileScalper
import requests

async def test_transformation_fix():
    print('üîß TESTING TRANSFORMATION FIX')
    print('=' * 50)
    
    # Test 1: Create orchestrator and test transformation directly
    print('1Ô∏è‚É£ TESTING ORCHESTRATOR TRANSFORMATION:')
    print('-' * 40)
    
    try:
        orchestrator = TradingOrchestrator()
        
        # Get current market data
        response = requests.get('https://algoauto-9gx56.ondigitalocean.app/api/v1/market-data', timeout=5)
        if response.status_code == 200:
            raw_data = response.json()['data']
            
            # Test transformation
            transformed_data = orchestrator._transform_market_data_for_strategies(raw_data)
            
            if transformed_data:
                print(f'‚úÖ Transformation successful: {len(transformed_data)} symbols')
                
                # Check specific symbols
                test_symbols = ['ASIANPAINT', 'GODREJCP', 'TATASTEEL']
                for symbol in test_symbols:
                    if symbol in transformed_data:
                        data = transformed_data[symbol]
                        print(f'  {symbol}:')
                        print(f'    price_change: {data.get("price_change", "MISSING")}')
                        print(f'    volume_change: {data.get("volume_change", "MISSING")}')
                        print(f'    changeper: {data.get("changeper", "MISSING")}')
                        
                        # Check if transformation worked
                        if data.get('price_change') != 0 or data.get('volume_change') != 0:
                            print(f'    ‚úÖ Transformation working!')
                        else:
                            print(f'    ‚ùå Still getting zero values')
                    else:
                        print(f'  {symbol}: Not found in transformed data')
                        
            else:
                print('‚ùå Transformation failed - empty result')
                
        else:
            print(f'‚ùå Cannot get market data: {response.status_code}')
            
    except Exception as e:
        print(f'‚ùå Error testing transformation: {e}')
    
    print()
    
    # Test 2: Test volume profile scalper with transformed data
    print('2Ô∏è‚É£ TESTING VOLUME PROFILE SCALPER:')
    print('-' * 40)
    
    try:
        strategy = EnhancedVolumeProfileScalper({})
        await strategy.initialize()
        
        # Get transformed data
        response = requests.get('https://algoauto-9gx56.ondigitalocean.app/api/v1/market-data', timeout=5)
        if response.status_code == 200:
            raw_data = response.json()['data']
            
            # Transform data
            orchestrator = TradingOrchestrator()
            transformed_data = orchestrator._transform_market_data_for_strategies(raw_data)
            
            if transformed_data:
                print(f'‚úÖ Testing strategy with {len(transformed_data)} symbols')
                
                # Call strategy with transformed data
                await strategy.on_market_data(transformed_data)
                
                # Check if signals were generated
                signal_count = len([pos for pos in strategy.current_positions.values() if pos is not None])
                print(f'üìä Signals generated: {signal_count}')
                
                if signal_count > 0:
                    print('‚úÖ SUCCESS: Original strategy is generating signals!')
                    
                    # Show sample signals
                    for symbol, signal in strategy.current_positions.items():
                        if signal and isinstance(signal, dict):
                            print(f'  üö® SIGNAL: {symbol} {signal.get("action", "?")} '
                                  f'Entry: ‚Çπ{signal.get("entry_price", 0):.2f} '
                                  f'Confidence: {signal.get("confidence", 0):.2f}')
                            break  # Show just one sample
                else:
                    print('‚ùå No signals generated by strategy')
                    
                    # Debug: Check what the strategy is seeing
                    print('üîç DEBUG: Sample transformed data:')
                    sample_symbol = list(transformed_data.keys())[0]
                    sample_data = transformed_data[sample_symbol]
                    print(f'  {sample_symbol}: price_change={sample_data.get("price_change", "MISSING")}')
                    print(f'  {sample_symbol}: volume_change={sample_data.get("volume_change", "MISSING")}')
                    
            else:
                print('‚ùå No transformed data available')
                
    except Exception as e:
        print(f'‚ùå Error testing strategy: {e}')

if __name__ == "__main__":
    asyncio.run(test_transformation_fix()) 