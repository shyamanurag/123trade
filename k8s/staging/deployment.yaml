apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-system-staging
  namespace: trading-staging
  labels:
    app: trading-system
    environment: staging
    version: v2.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: trading-system
      environment: staging
  template:
    metadata:
      labels:
        app: trading-system
        environment: staging
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: trading-system-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: trading-system
        image: ${IMAGE_TAG}
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: metrics
        - containerPort: 8002
          name: websocket
        env:
        - name: ENVIRONMENT
          value: "staging"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: encryption-key
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp/prometheus_multiproc_dir"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: config-volume
        configMap:
          name: trading-config-staging
      - name: logs-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      
      nodeSelector:
        node-type: staging
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - trading-system
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: trading-system-staging
  namespace: trading-staging
  labels:
    app: trading-system
    environment: staging
spec:
  type: ClusterIP
  selector:
    app: trading-system
    environment: staging
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: websocket
    port: 8002
    targetPort: 8002
    protocol: TCP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-config-staging
  namespace: trading-staging
data:
  config.yaml: |
    environment: staging
    debug: true
    version: "2.0.0"
    
    database:
      host: "staging-db.internal"
      port: 5432
      database: "trading_staging"
      ssl_mode: "require"
      pool_size: 10
      max_overflow: 15
      pool_timeout: 30
    
    redis:
      host: "localhost"
      port: 6379
      db: 0
      ssl: false
      socket_timeout: 10.0
    
    security:
      jwt_algorithm: "HS256"
      jwt_expiration_hours: 24
      password_hash_rounds: 12
      max_login_attempts: 5
      lockout_duration_minutes: 30
      require_2fa: false
    
    trading:
      max_daily_trades: 100
      max_position_size_percent: 2.0
      default_stop_loss_percent: 2.0
      max_drawdown_percent: 10.0
      risk_per_trade_percent: 0.25
      min_order_value: 1000.0
      max_order_value: 100000.0
    
    monitoring:
      prometheus_enabled: true
      prometheus_port: 8001
      health_check_interval_seconds: 30
      log_level: "DEBUG"
      log_format: "json"
      metrics_retention_days: 30
    
    websocket:
      port: 8002
      max_connections: 100
      ping_interval: 20
      ping_timeout: 10
      compression_enabled: true
    
    compliance:
      sebi_reporting_enabled: false
      audit_trail_retention_days: 365
      max_position_value: 10000000.0
    
    timezone: "Asia/Kolkata"
    max_workers: 4

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trading-system-hpa-staging
  namespace: trading-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trading-system-staging
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: v1
kind: Namespace
metadata:
  name: trading-staging
  labels:
    name: trading-staging
    environment: staging

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-system-sa
  namespace: trading-staging 